// <auto-generated />
using System;
using Badge2022EF.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Badge2022EF.DAL.Migrations
{
    [DbContext(typeof(Badge2022Context))]
    [Migration("20220901204832_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Badge2022EF.DAL.Entities.CoursEntity", b =>
                {
                    b.Property<int>("cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cid"), 1L, 1);

                    b.Property<int?>("cformfid")
                        .HasColumnType("int");

                    b.Property<string>("cnom")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("enom")
                        .HasComment("TRIAL");

                    b.HasKey("cid");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("cid"));

                    b.HasIndex("cformfid");

                    b.ToTable("cours", (string)null);

                    b.HasComment("TRIAL");
                });

            modelBuilder.Entity("Badge2022EF.DAL.Entities.PersonneEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email")
                        .HasComment("TRIAL");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ucodep")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("ucodep")
                        .HasComment("TRIAL");

                    b.Property<DateTime?>("udate")
                        .IsRequired()
                        .HasColumnType("date")
                        .HasColumnName("udate_naissance")
                        .HasComment("TRIAL");

                    b.Property<int?>("uformationfid")
                        .HasColumnType("int");

                    b.Property<string>("unom")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("unom")
                        .HasComment("TRIAL");

                    b.Property<string>("upays")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("upays")
                        .HasComment("TRIAL");

                    b.Property<string>("uprenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("uprenom")
                        .HasComment("TRIAL");

                    b.Property<string>("urue")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("urue")
                        .HasComment("TRIAL");

                    b.Property<string>("uville")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("uville")
                        .HasComment("TRIAL");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("uformationfid");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasComment("TRIAL");
                });

            modelBuilder.Entity("Badge2022EF.DAL.ExamenEntity", b =>
                {
                    b.Property<int>("eid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("eid"), 1L, 1);

                    b.Property<int?>("eCourscid")
                        .HasColumnType("int");

                    b.Property<string>("enom")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("enom")
                        .HasComment("TRIAL");

                    b.Property<int>("enote")
                        .HasColumnType("int");

                    b.HasKey("eid");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("eid"));

                    b.HasIndex("eCourscid");

                    b.ToTable("examens", (string)null);

                    b.HasComment("TRIAL");
                });

            modelBuilder.Entity("Badge2022EF.DAL.FormationEntity", b =>
                {
                    b.Property<int>("fid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("fid"), 1L, 1);

                    b.Property<string>("fnom")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("fnom")
                        .HasComment("TRIAL");

                    b.HasKey("fid")
                        .HasName("PK_ExamenEntity");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("fid"));

                    b.ToTable("formations", (string)null);

                    b.HasComment("TRIAL");
                });

            modelBuilder.Entity("Badge2022EF.DAL.NotesEleveEntity", b =>
                {
                    b.Property<int>("npid")
                        .HasColumnType("int");

                    b.Property<int>("ncid")
                        .HasColumnType("int");

                    b.Property<int>("nnote")
                        .HasColumnType("int")
                        .HasColumnName("note")
                        .HasComment("TRIAL");

                    b.HasKey("npid", "ncid");

                    b.HasIndex("ncid");

                    b.ToTable("notesEleve", (string)null);

                    b.HasComment("TRIAL");
                });

            modelBuilder.Entity("Badge2022EF.DAL.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Name")
                        .HasComment("TRIAL");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_RoleEntity");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasComment("TRIAL");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Badge2022EF.DAL.Entities.CoursEntity", b =>
                {
                    b.HasOne("Badge2022EF.DAL.FormationEntity", "cform")
                        .WithMany("fCours")
                        .HasForeignKey("cformfid");

                    b.Navigation("cform");
                });

            modelBuilder.Entity("Badge2022EF.DAL.Entities.PersonneEntity", b =>
                {
                    b.HasOne("Badge2022EF.DAL.FormationEntity", "uformation")
                        .WithMany("fPersonnes")
                        .HasForeignKey("uformationfid");

                    b.Navigation("uformation");
                });

            modelBuilder.Entity("Badge2022EF.DAL.ExamenEntity", b =>
                {
                    b.HasOne("Badge2022EF.DAL.Entities.CoursEntity", "eCours")
                        .WithMany("cexams")
                        .HasForeignKey("eCourscid");

                    b.Navigation("eCours");
                });

            modelBuilder.Entity("Badge2022EF.DAL.NotesEleveEntity", b =>
                {
                    b.HasOne("Badge2022EF.DAL.Entities.CoursEntity", "nCours")
                        .WithMany("cNotesEleve")
                        .HasForeignKey("ncid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Badge2022EF.DAL.Entities.PersonneEntity", "nPersonnes")
                        .WithMany("uNotesEleve")
                        .HasForeignKey("npid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("nCours");

                    b.Navigation("nPersonnes");
                });

            modelBuilder.Entity("Badge2022EF.DAL.RoleEntity", b =>
                {
                    b.HasOne("Badge2022EF.DAL.Entities.PersonneEntity", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Badge2022EF.DAL.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Badge2022EF.DAL.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Badge2022EF.DAL.Entities.PersonneEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Badge2022EF.DAL.Entities.PersonneEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Badge2022EF.DAL.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Badge2022EF.DAL.Entities.PersonneEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Badge2022EF.DAL.Entities.PersonneEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Badge2022EF.DAL.Entities.CoursEntity", b =>
                {
                    b.Navigation("cNotesEleve");

                    b.Navigation("cexams");
                });

            modelBuilder.Entity("Badge2022EF.DAL.Entities.PersonneEntity", b =>
                {
                    b.Navigation("uNotesEleve");
                });

            modelBuilder.Entity("Badge2022EF.DAL.FormationEntity", b =>
                {
                    b.Navigation("fCours");

                    b.Navigation("fPersonnes");
                });
#pragma warning restore 612, 618
        }
    }
}
